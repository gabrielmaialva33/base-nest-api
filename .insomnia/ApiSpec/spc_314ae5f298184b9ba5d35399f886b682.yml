_id: spc_314ae5f298184b9ba5d35399f886b682
type: ApiSpec
parentId: wrk_1629d20a4b0444d88a87592d593cee39
modified: 1703472471516
created: 1701886126179
fileName: Base Nest API
contents: >+
  openapi: 3.0.3

  servers:
    - url: http://localhost:3000
      description: Local server
    - url: https://api.hidedevelopment.cloud
      description: Development server
  info:
    title: Base Nest API
    version: 1.0.0
    description: |
      This is a base Nest API with JWT authentication and CRUD operations for users.

      # Introduction
      This API was developed using [NestJS](https://nestjs.com/) framework, [Objection.js](https://vincit.github.io/objection.js/) ORM and [PostgreSQL](https://www.postgresql.org/) database. It has a user authentication system using [JWT](https://jwt.io/) and CRUD operations for users.

      # Authentication
      This API uses [JWT](https://jwt.io/) authentication. To get a token, you need to make a POST request to `/api/sign_in` with a JSON body containing the user email OR username and password. The response will be a JSON with the user data and the token. To use the token, you need to put it in the `Authorization` header of the request with the `Bearer` prefix. Example: `Authorization: Bearer <token>`.

      <!-- ReDoc-Inject: <security-definitions> -->
    x-logo:
      url: https://telegra.ph/file/601ee09e6fe658d0de5b9.png
      altText: HideDev Logo
    contact:
      name: Gabriel M.
      email: gabrielmaialva33@gmail.com
      url: https://github.com/gabrielmaialva33
    license:
      name: MIT
      url: https://opensource.org/licenses/MIT
  tags:
    - name: Session
      description: Operations about sessions
    - name: User
      description: Operations about users
    - name: Role
      description: Operations about roles
    - name: File
      description: Operations about files
  x-tagGroups:
    - name: Authentication
      tags:
        - Session
    - name: User Management
      tags:
        - User
        - Role
    - name: File Management
      tags:
        - File
  paths:
    /api/sign_in:
      post:
        summary: Sign in
        description: Sign in user
        operationId: sign.in
        tags:
          - Session
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
        x-codeSamples:
          - lang: shell
            source: |
              curl -X POST "http://localhost:3000/api/sign_in" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"uid\": \"gabriel.alva\", \"password\": \"Dev@551238\"}"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/sign_in", {
                method: "POST",
                headers: {
                  "accept": "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  "uid": "gabriel.alva",
                  "password": "Dev@551238"
                })
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        x-tagGroups:
          - name: Authentication
        requestBody:
          description: Sign in object with user email OR username and password
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignIn'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SignSuccess'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/sign_up:
      post:
        summary: Sign up
        description: Sign up user
        operationId: sign.up
        tags:
          - Session
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
        x-codeSamples:
          - lang: shell
            source: |
              curl -X POST "http://localhost:3000/api/sign_up" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"first_name\": \"Gabriel\", \"last_name\": \"Alva\", \"email\": \"gabriel.maia@email.com\", \"avatar_url\": \"https://telegra.ph/file/05cba"," \
              "54e6cb16c3ea0d9e.png\", \"username\": \"gabriel.alva\", \"password\": \"Dev@551238\"}"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/sign_up", {
              method: "POST",
              headers: {
                  "accept": "application/json",
                  "Content-Type": "application/json"
              },
              body: JSON.stringify({
                  "first_name": "Gabriel",
                  "last_name": "Alva",
                  "email": "gabriel.maia@email.com"
                  "avatar_url": "https://telegra.ph/file/05cba54e6cb16c3ea0d9e.png",
                  "username": "gabriel.alva",
                  "password": "Dev@551238"
              })
              }).then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.log(error));
        x-tagGroups:
          - name: Authentication
        requestBody:
          description: Sign up object with user first name, last name, email, avatar url, username and password
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingUp'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SignSuccess'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/sign_out:
      delete:
        summary: Sign out
        description: Sign out user
        operationId: sign.out
        tags:
          - Session
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
          - name: Authorization
            in: header
            description: Authorization
            required: true
            schema:
              type: string
              description: JWT token
              example: Bearer <token>
        x-codeSamples:
          - lang: shell
            source: |
              curl -X DELETE "http://localhost:3000/api/sign_out" -H "accept: application/json" -H "Authorization: Bearer <token>"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/sign_out", {
                method: "DELETE",
                headers: {
                  "accept": "application/json",
                  "Authorization": "Bearer <token>"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        x-tagGroups:
          - name: Authentication
        security:
          - bearerToken: [ ]
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/refresh_token:
      patch:
        summary: Refresh token
        description: Refresh user token
        operationId: refresh.token
        tags:
          - Session
        parameters:
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
        x-codeSamples:
          - lang: shell
            source: |
              curl -X POST "http://localhost:3000/api/refresh_token" -H "accept: application/json" -H "Authorization: Bearer <token>"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/refresh_token", {
              method: "POST",
              headers: {
                  "accept": "application/json",
                  "Authorization": "Bearer <token>"
              }
              })
              .then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.log(error));
        x-tagGroups:
          - name: Authentication
        security:
          - bearerToken: [ ]
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SignSuccess'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /api/users:
      get:
        summary: Paginate users
        description: Get paginated users
        operationId: user.paginate
        tags:
          - User
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
          - name: page
            in: query
            description: Page number
            required: false
            schema:
              type: integer
              format: int64
              example: 1
          - name: per_page
            in: query
            description: Number of items per page
            required: false
            schema:
              type: integer
              format: int64
              example: 10
          - name: sort
            in: query
            description: Sort users by field
            required: false
            schema:
              type: string
              enum:
                - id
                - first_name
                - last_name
                - email
                - username
                - last_login_at
                - created_at
                - updated_at
              example: id
          - name: order
            in: query
            description: Sort users by order
            required: false
            schema:
              type: string
              enum:
                - asc
                - desc
                - ASC
                - DESC
              example: asc
          - name: search
            in: query
            description: Search users by field (first_name, last_name, email, username)
            required: false
            schema:
              type: string
              example: 'Gabriel'
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X GET "http://localhost:3000/api/users" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/users", {
                method: "GET",
                headers: {
                  "accept": "application/json"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
                    pagination:
                      allOf:
                        - $ref: '#/components/schemas/Pagination'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        summary: Create user
        description: Create a new user
        operationId: user.create
        tags:
          - User
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X POST "http://localhost:3000/api/users" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"first_name\": \"Gabriel\", \"last_name\": \"Alva\", \"email\": \"gabriel.maia@email.com\", \"avatar_url\": \"https://telegra.ph/file/05cba54e6cb16c3ea0d9e.png\", \"username\": \"gabriel.alva\", \"password\": \"Dev@551238\"}"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/users", {
              method: "POST",
              headers: {
                  "accept": "application/json",
                  "Content-Type": "application/json"
              },
              body: JSON.stringify({
                  "first_name": "Gabriel",
                  "last_name": "Alva",
                  "email": "gabriel.maia@email.com",
                  "avatar_url": "https://telegra.ph/file/05cba54e6cb16c3ea0d9e.png",
                  "username": "gabriel.alva",
                  "password": "Dev@551238"
              })
              }).then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.log(error));
        requestBody:
          description: User object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Create'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/users/all:
      get:
        summary: List users
        description: Get all users (no pagination)
        operationId: user.get.all
        tags:
          - User
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
          - name: sort
            in: query
            description: Sort users by field
            required: false
            schema:
              type: string
              enum:
                - id
                - first_name
                - last_name
                - email
                - username
                - last_login_at
                - created_at
                - updated_at
              example: id
          - name: order
            in: query
            description: Sort users by order
            required: false
            schema:
              type: string
              enum:
                - asc
                - desc
                - ASC
                - DESC
              example: asc
          - name: search
            in: query
            description: Search users by field (first_name, last_name, email, username)
            required: false
            schema:
              type: string
              example: 'Gabriel'
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X GET "http://localhost:3000/api/users/all" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/users/all", {
              method: "GET",
              headers: {
                  "accept": "application/json"
              }
              })
              .then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.log(error));
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/users/{id}:
      get:
        summary: Get user
        description: Get user by id
        operationId: user.get.by.id
        tags:
          - User
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: id
            in: path
            description: User id
            required: true
            schema:
              type: string
              format: int64
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X GET "http://localhost:3000/api/users/1" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/users/1", {
                method: "GET",
                headers: {
                  "accept": "application/json"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      put:
        summary: Edit user
        description: Update user by id
        operationId: user.update.by.id
        tags:
          - User
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: id
            in: path
            description: User id
            required: true
            schema:
              type: string
              format: int64
        x-codeSamples:
          - lang: shell
            source: |
              curl -X PUT "http://localhost:3000/api/users/1" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"first_name\": \"Gabriel\", \"last_name\": \"Alva\", \"email\": \"gabriel.maia@email.com\", \"avatar_url\": \"https://telegra.ph/file/05cba54e6cb16c3ea0d9e.png\", \"username\": \"gabriel.alva\"}"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/users/1", {
              method: "PUT",
              headers: {
                  "accept": "application/json",
                  "Content-Type": "application/json"
              },
              body: JSON.stringify({
                  "first_name": "Gabriel",
                  "last_name": "Alva",
                  "email": "maia@email.com",
                  "avatar_url": "https://telegra.ph/file/05cba54e6cb16c3ea0d9e.png",
                  "username": "gabriel.maia" })
              }).then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.log(error));

        security:
          - bearerToken: [ ]
        requestBody:
          description: User object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.Create'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      delete:
        summary: Delete user
        description: Delete user by id
        operationId: user.delete.by.id
        tags:
          - User
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: id
            in: path
            description: User id
            required: true
            schema:
              type: string
              format: int64
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X DELETE "http://localhost:3000/api/users/1" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/users/1", {
                method: "DELETE",
                headers: {
                  "accept": "application/json"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        responses:
          '204':
            description: No Content
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /api/roles:
      get:
        summary: Paginate roles
        description: Get paginated roles
        operationId: role.paginate
        tags:
          - Role
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
          - name: page
            in: query
            description: Page number
            required: false
            schema:
              type: integer
              format: int64
              example: 1
          - name: per_page
            in: query
            description: Number of items per page
            required: false
            schema:
              type: integer
              format: int64
              example: 10
          - name: sort
            in: query
            description: Sort roles by field
            required: false
            schema:
              type: string
              enum:
                - id
                - name
                - slug
                - description
              example: id
          - name: order
            in: query
            description: Sort roles by order
            required: false
            schema:
              type: string
              enum:
                - asc
                - desc
                - ASC
                - DESC
              example: asc
          - name: search
            in: query
            description: Search roles by field (name, slug, description)
            required: false
            schema:
              type: string
              example: 'admin'
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X GET "http://localhost:3000/api/roles" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/roles", {
                method: "GET",
                headers: {
                  "accept": "application/json"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Role'
                    pagination:
                      allOf:
                        - $ref: '#/components/schemas/Pagination'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/roles/all:
      get:
        summary: List roles
        description: Get all roles (no pagination)
        operationId: role.get.all
        tags:
          - Role
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
          - name: sort
            in: query
            description: Sort roles by field
            required: false
            schema:
              type: string
              enum:
                - id
                - name
                - slug
                - description
              example: id
          - name: order
            in: query
            description: Sort roles by order
            required: false
            schema:
              type: string
              enum:
                - asc
                - desc
                - ASC
                - DESC
              example: asc
          - name: search
            in: query
            description: Search roles by field (name, slug, description)
            required: false
            schema:
              type: string
              example: 'admin'
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X GET "http://localhost:3000/api/roles/all" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/roles/all", {
                method: "GET",
                headers: {
                  "accept": "application/json"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    /api/roles/{id}:
      get:
        summary: Get role
        description: Get role by id
        operationId: role.get.by.id
        tags:
          - Role
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: application/json
          - name: id
            in: path
            description: Role id
            required: true
            schema:
              type: string
              format: int64
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X GET "http://localhost:3000/api/roles/1" -H "accept: application/json"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/roles/1", {
                method: "GET",
                headers: {
                  "accept": "application/json"
                }
              })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.log(error));
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Role'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /api/files/images:
      post:
        summary: Upload image
        description: Upload image
        operationId: file.upload.image
        tags:
          - File
        parameters:
          - name: Content-Type
            in: header
            description: Content-Type
            required: true
            schema:
              type: string
              example: multipart/form-data
          - name: Accept-Language
            in: header
            description: Accept-Language
            required: false
            schema:
              type: string
              description: Language code (ISO 639-1)
              example: en-US
        security:
          - bearerToken: [ ]
        x-codeSamples:
          - lang: shell
            source: |
              curl -X POST "http://localhost:3000/api/files/images" -H "accept: application/json" -H "Authorization: Bearer <token>" -H "Content-Type: multipart/form-data" -F "file=@/path/to/file"
          - lang: javascript
            source: |
              fetch("http://localhost:3000/api/files/images", {
              method: "POST",
              headers: {
                  "accept": "application/json",
                  "Authorization": "Bearer <token>",
                  "Content-Type": "multipart/form-data"
              },
              body: {
                  "file": "/path/to/file"
              }
              })
              .then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.log(error));
        requestBody:
          description: Image file
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/File'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  components:
    securitySchemes:
      bearerToken:
        type: http
        scheme: bearer
        bearerFormat: JWT
    schemas:
      Id:
        type: integer
        format: int64
        readOnly: true
        example: 1
      Token:
        type: string
        description: JWT token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjI5MjU0NjQ2LCJleHAiOjE2Mjk4N
        'x-tags':
          - Token
      Pagination:
        type: object
        properties:
          total:
            type: integer
            format: int64
            description: Total number of items
            example: 3
          current_page:
            type: integer
            format: int64
            description: Current page number
            example: 2
          per_page:
            type: integer
            format: int64
            description: Number of items per page
            example: 1
          total_pages:
            type: integer
            format: int64
            description: Total number of pages
            example: 3
          first:
            type: integer
            format: int64
            description: First page number
            example: 1
          previous:
            type: integer
            format: int64
            description: Previous page number
            example: 1
          next:
            type: integer
            format: int64
            description: Next page number
            example: 3
          last:
            type: integer
            format: int64
            description: Last page number
            example: 3
          has_more:
            type: boolean
            description: Has more pages
            example: true
          has_previous:
            type: boolean
            description: Has previous pages
            example: true
        example: {
          "total": 3,
          "current_page": 2,
          "per_page": 1,
          "total_pages": 3,
          "first": 1,
          "previous": 1,
          "next": 3,
          "last": 3,
          "has_more": true,
          "has_previous": true
        }
      File:
        type: object
        properties:
          size:
            type: integer
            format: int64
            description: File size
            example: 45095
          filename:
            type: string
            description: File name
            example: c00d81afdf6d2ae04f3a1e62843b9f6d.jpg
          originalFilename:
            type: string
            description: Original file name
            example: 2023-11-14 01.46.42.jpg
          mimetype:
            type: string
            description: File mime type
            example: image/jpeg
          encoding:
            type: string
            description: File encoding
            example: 7bit
          fieldname:
            type: string
            description: File field name
            example: file
          url:
            type: string
            description: File url
            example: http://localhost:3000/public/images/c00d81afdf6d2ae04f3a1e62843b9f6d.jpg
        example: {
          "size": 45095,
          "filename": "c00d81afdf6d2ae04f3a1e62843b9f6d.jpg",
          "originalFilename": "2023-11-14 01.46.42.jpg",
          "mimetype": "image/jpeg",
          "encoding": "7bit",
          "fieldname": "file",
          "url": "http://localhost:3000/public/images/c00d81afdf6d2ae04f3a1e62843b9f6d.jpg"
        }
      User:
        type: object
        properties:
          id:
            description: User id
            allOf:
              - $ref: '#/components/schemas/Id'
          first_name:
            type: string
            description: User first name
            example: Gabriel
          last_name:
            type: string
            description: User last name
            example: Alva
          email:
            type: string
            description: User email
            example: "gabriel.alva@email.com"
          avatar_url:
            type: string
            description: User avatar url
            example: "https://avatars.githubusercontent.com/u/26732067?9860f53f5e541765777ca3f00f94ab9d360645ce&v=4"
          username:
            type: string
            description: User username
            example: gabriel.alva
          last_login_at:
            type: string
            format: date-time
            description: User last login at
          is_email_verified:
            type: boolean
            description: User is email verified
            example: false
          created_at:
            type: string
            format: date-time
            description: User created at
            example: "2023-12-06 18:10:21"
        example: {
          "id": 1,
          "first_name": "Gabriel",
          "last_name": "Alva",
          "email": "gabriel.alva@email.com",
          "avatar_url": "https://avatars.githubusercontent.com/u/26732067?9860f53f5e541765777ca3f00f94ab9d360645ce&v=4",
          "username": "gabriel.alva",
          "last_login_at": "2023-12-06 18:10:21",
          "is_email_verified": false,
          "created_at": "2023-12-06 18:10:21",
          "updated_at": "2023-12-06 18:10:21"
        }
        'x-tags':
          - User
      User.Create:
        type: object
        properties:
          first_name:
            type: string
            description: User first name
          last_name:
            type: string
            description: User last name
          email:
            type: string
            description: User email
          avatar_url:
            type: string
            description: User avatar url
          username:
            type: string
            description: User username
          password:
            type: string
            description: User password
        required:
          - first_name
          - last_name
          - email
          - password
        example: {
          "first_name": "Gabriel",
          "last_name": "Alva",
          "email": "gabriel.alva@emial.com",
          "avatar_url": "https://telegra.ph/file/05cba54e6cb16c3ea0d9e.png",
          "username": "gabriel.alva",
          "password": "Dev@551238"
        }

      Role:
        type: object
        properties:
          id:
            description: Role id
            allOf:
              - $ref: '#/components/schemas/Id'
          name:
            type: string
            description: Role name
            example: admin
          slug:
            type: string
            description: Role slug
            example: administrator
          description:
            type: string
            description: Role description
            example: Administrator system role
          created_at:
            type: string
            format: date-time
            description: Role created at
            example: "2023-12-06 18:10:21"
        example: {
          "id": 1,
          "name": "admin",
          "slug": "administrator",
          "description": "Administrator system role",
        }

      SignIn:
        type: object
        properties:
          uid:
            type: string
            description: User email OR username
          password:
            type: string
            description: User password
        required:
          - uid
          - password
        example: {
          "uid": "gabriel.alva",
          "password": "Dev@551238"
        }
      SingUp:
        $ref: '#/components/schemas/User.Create'
      SignSuccess:
        type: object
        properties:
          user:
            allOf:
              - $ref: '#/components/schemas/User'
          token:
            allOf:
              - $ref: '#/components/schemas/Token'
        example: {
          "user": {
            "id": 1,
            "first_name": "Gabriel",
            "last_name": "Alva",
            "email": "gabriel.maia@email.com",
            "avatar_url": "https://avatars.githubusercontent.com/u/26732067?9860f53f5e541765777ca3f00f94ab9d360645ce&v=4",
            "username": "gabriel.alva",
            "last_login_at": "2023-12-06 18:10:21",
            "is_email_verified": false,
            "created_at": "2023-12-06 18:10:21",
            "updated_at": "2023-12-06 18:10:21"
          },
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjI5MjU0NjQ2LCJleHAiOjE2Mjk4N"
        }

      Error:
        type: object
        properties:
          message:
            type: string
            description: Error message
            example: Internal server error
          statusCode:
            type: integer
            description: Error internal code
            example: 500
        example: {
          "statusCode": 500,
          "message": "Internal server error"
        }


contentType: yaml
