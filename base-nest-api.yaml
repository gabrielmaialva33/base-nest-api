openapi: 3.0.3
info:
  title: Base Nest API
  version: 1.0.0
  description: Api documentation for base nest api
  contact:
    name: Gabriel M.
    email: gabrielmaialva33@gmail.com
    url: https://github.com/gabrielmaialva33
servers:
  - url: http://localhost:3000
    description: Local server
paths:
  /api/users:
    get:
      summary: List users
      description: Get all users
      operationId: user.get.all
      tags:
        - User
      parameters:
        - name: Content-Type
          in: header
          description: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create user
      description: Create a new user
      operationId: user.create
      tags:
        - User
      parameters:
        - name: Content-Type
          in: header
          description: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}:
    get:
      summary: Get user
      description: Get user by id
      operationId: user.get.by.id
      tags:
        - User
      parameters:
        - name: Content-Type
          in: header
          description: Content-Type
          required: true
          schema:
            type: string
            example: application/json
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Edit user
      description: Update user by id
      operationId: user.update.by.id
      tags:
        - User
      parameters:
        - name: Content-Type
          in: header
          description: Content-Type
          required: true
          schema:
            type: string
            example: application/json
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: int64
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User.Create'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      description: Delete user by id
      operationId: user.delete.by.id
      tags:
        - User
      parameters:
        - name: Content-Type
          in: header
          description: Content-Type
          required: true
          schema:
            type: string
            example: application/json
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
tags:
  - name: User
    description: Operations about users
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User id
          example: 1
        first_name:
          type: string
          description: User first name
          example: Gabriel
        last_name:
          type: string
          description: User last name
          example: Alva
        email:
          type: string
          description: User email
          example: "gabriel.alva@email.com"
        avatar_url:
          type: string
          description: User avatar url
          example: "https://avatars.githubusercontent.com/u/26732067?9860f53f5e541765777ca3f00f94ab9d360645ce&v=4"
        username:
          type: string
          description: User username
          example: gabriel.alva
        last_login_at:
          type: string
          format: date-time
          description: User last login at
        is_email_verified:
          type: boolean
          description: User is email verified
          example: false
        created_at:
          type: string
          format: date-time
          description: User created at
          example: "2023-12-06 18:10:21"
      example: {
        "id": 1,
        "first_name": "Gabriel",
        "last_name": "Alva",
        "email": "gabriel.alva@email.com",
        "avatar_url": "https://avatars.githubusercontent.com/u/26732067?9860f53f5e541765777ca3f00f94ab9d360645ce&v=4",
        "username": "gabriel.alva",
        "last_login_at": "2023-12-06 18:10:21",
        "is_email_verified": false,
        "created_at": "2023-12-06 18:10:21",
        "updated_at": "2023-12-06 18:10:21"
      }
    User.Create:
      type: object
      properties:
        first_name:
          type: string
          description: User first name
        last_name:
          type: string
          description: User last name
        email:
          type: string
          description: User email
        avatar_url:
          type: string
          description: User avatar url
        username:
          type: string
          description: User username
        password:
          type: string
          description: User password
      required:
        - first_name
        - last_name
        - email
        - password
      example: {
        "first_name": "Gabriel",
        "last_name": "Alva",
        "email": "gabriel.alva@emial.com",
        "avatar_url": "https://avatars.githubusercontent.com/u/55906861?v=4",
        "username": "gabriel.alva",
        "password": "Dev@551238"
      }

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: Internal server error
        statusCode:
          type: integer
          description: Error internal code
          example: 500
      example: {
        "statusCode": 500,
        "message": "Internal server error"
      }


